1.数组对象
	js中最基本的数据类型，封装和数组相关的方法和属性
		房间1      房间2       房间3
		周冬雨     刘亦菲      林志玲
		创建数组的方式
			1.通过new运算符调用array对象构造函数
				var a=new Array();
			2.通过构造函数传递元素为参数(创建带指定元素的数组)
				var a=new Array(10,20,30,'gaga')
			3.直接将元素放入[]中，元素通过逗号隔开
				var a=[1,2,3,4]
			4.创建指定数组(元素个数)
				var a=new Array(4);
2.其他数据类型
	a.函数
		函数角色2种，一种是数据类型，一种是程序设计
		定义函数的方式
		function 函数名(arg)
		{
			this.arg=arg
		}
	b.空值
		之前所有数据类型都有自己的内容，还有一种：什么都没有(null)
		注意:=代表赋值   ==代表计较  ===代表对象比较
	c.不确定数据类型
		undefined 表示一个变量什么都没有得到，空都没有
		在应用里面null和undefined实际意义相同
	d.数据类型转换
		1>隐式数据类型转换
			程序运行时候会根据上下文需要自动将数据转换为另外一种数据过程
		2>显式数据类型转换
			通常用parseInt、parseFloat
3.变量和常量
	a.常量
		从始至终不能被改变的值
		常量的种类
		包括布尔类型，字符类型，数值类型，null等等
	b.变量
		b1.什么是变量
			程序中可以发生改变的量，专业说法叫做内存单元
			可以理解为装东西的容器，变量名代表分配给他们的内存单元
		b2.变量的定义方式
			var 变量名=值   定义变量
			变量名=值       赋值
			var 变量名      定义变量
			var str='hello'
			var a=10
			var b=false
		b3.变量的命名规则
			变量名以字母或者_或者$开头，后面可以跟数字或者字符串，不能使用特殊符号
			js对标识符大小写敏感
		b4.变量的作用域
			作用域:有效范围，js变量有全局和局部之分，变量名相同时候局部作用域优先于全局作用域
4.运算符和表达式
	a.表达式
		产生结果的式子，表达式可以作为参数传递给函数或者将表达式赋值给变量保存
	b.操作数
		操作数就是表达式中的常量或者变量
		(a+b)/c+d
	c.运算符
		c1.算数运算符
			表达式中起计算作用，如果在数学中，运算符就是加减乘除
			+
			-
			*
			/
			%
			加法操作数字是返回俩数字的和，如果是字符就是拼接
		c2.关系运算符
			比较两个操作数大于小于等于运算符，返回的值是布尔值
			1>相等运算符，判断两个操作数是否相等
				如果相等，返回真，否则返回假
			2>等同运算符
				== 并非真正意义上的相等性判断，通过数据类型转换也可以返回真
				=== 严格意义上的相等，他们的值和数据类型完全一致才能返回真
			3>不等运算符
				使用!=返回一个布尔值判断两个操作数是否不相等，如果不相等返回真
			4>不等同运算符
				!==效果和等同相反，严格不相等返回真
			5>比较运算符
				两个操作数的比较，返回值只能是真或者假
				>
				<
				==
				>=
				<=
				!=
			6>in运算符
				in运算符检测对象是否有指定属性，通常数组对象中存在元素索引集合。集合中每个元素都是非负整数
			7>instance运算符
				返回一个布尔值，表名对象是否是某个类的实例
		c3.逻辑运算符
			1>逻辑与
				操作符&&,属于双目运算符，操作数被进行与运算，操作数可以是变量也可以是常量
			2>逻辑或
				操作符||,属于双目运算符,对操作数进行或运算，返回一个布尔值
			3>逻辑非
				操作符!,属于单目运算符，对操作数逻辑值取反，操作数可以是变量也可以是常量

		c4.其他运算符
			1>类型检测
				js中每个数据都有数据类型，通过typeof获取数据类型的名字
			2>条件运算符
				可以根据条件在两个语句中选择一个来执行，三目运算符
				条件表达式?语句1:语句2
				满足条件执行语句1,不满足条件执行语句2
			3>void运算符
				有些地方不需要返回值，比如js调用浏览器
			4>数组存取运算符
			5>delete运算符
				delete运算符可以删除一个属性或者数组的元素，js对象的属性可以动态添加，也可以通过delete删除
			6>this运算符
				准确说是一个关键字，可以理解为运算符，面向对象中可以返回当前对象的引用

5.控制语句
	也叫程序流程控制，分为循环和判断
	建议:流程图制作(visio processon)
		a.判断语句(条件判断)
			跟图条件选择一个任务分支统称,js提供if语句和switch语句
			1>if语句
				测试的是一个布尔类型表达式，如果结果为真则执行某段程序
				if ( 表达式 )   //条件判断语句
				{
					语句组;     //满足条件时候执行的代码
				}
				注意:表达式一定要有，语句组是可选，可以通过一条或者多条语句组成
				if语句花括号是成对出现的，不能交叉嵌套
			2>if-else语句
				if语句根据表达式的值，决定是否执行某个任务，没有其他选项(2种选择)
				if ( 表达式 )
				{
					语句组;
				}
				else
				{
					语句组;
				}
 			3>if-else-if语句
 				当有多个可供判断条件时候，单个if-else表达不完全，可以使用if-else-if语句
 				if ( 表达式 )
 				{
 					语句组;
 				}
 				else if (表达式)
 				{
 					语句组;
 				}
 				。。。
 				else
 				{
 					语句组;
 				}
 				注意:表达式一定要有，语句组可以是一条或者多条语句组成
 			4>switch语句
 				使用if-else实现多路选择不容易维护可以使用switch-case语句代替，给定多个选择中一个符合条件的分支来执行
 				switch ( 表达式 )
 				{
 					case 标识1:
 						语句组;
 					case 标识2:
 						语句组;
 				}
 		b.循环语句
 			编程中有些代码需要执行多次，需要写入大量代码，帮助计算机解决重复和繁琐的任务，将重复执行的语句挡在循环中执行
 			1>for语句
 				重复执行的语句放在for循环中比较合适
 				for (表达式1;表达式2;表达式3)
 				{
 					语句组;
 				}
 			2>for in语句
 				for ( 变量 in 集合 )
 				{
 					语句组;
 				}
 				注意:变量作为集合中的一个元素，当集合中元素个数为0的时候不执行循环体
	 		c.while语句
	 			当重复执行动作比较简单时候可以用while替代for循环，while循环在执行循环体之前会测试一个条件，如果条件成立，进入到循环体中
	 			while ( 条件表达式 )
	 			{
	 				语句组;
	 			}
	 			注意:条件表达式是必选，无论什么类型数据返回的都是作为布尔类型处理
	 		d.do--while语句
	 			先执行一遍循环体，循环语句结束后再测试表达式，如果成立进入到循环体
 			5.跳出循环
 				在循环体中直接控制循环或者进行下一轮循环
 				break 无条件结束当前循环结构
 				continue 忽略后面的语句结束本轮循环进入下一轮循环




