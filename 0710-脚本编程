shell脚本
	把需要的命令保存到文本中，然后执行
a.脚本分类
	bash shell
	kshell
	cshell
b.脚本文件的执行方式
	./文件名   需要文件有执行权限
	bash 文件名 不需要文件有执行权限
c.shell脚本组成
	若干命令+脚本基本格式+特定语法=shell脚本
d.完整格式脚本
	shell通常以.sh结尾
	#!/bin/bash      脚本第一行使用#!(魔法字节)指定脚本运行程序
	echo "im no.1"
	hostname
	d1.标准脚本的执行方法(魔法字节生效)
		chmod 755 02.sh   给脚本权限
		./02.sh
		或者
		/root/shell/02.sh
	d2.非标准的执行方法(不建议)(魔法字节指定程序不会运行)
		. ./02.sh
		或者
		bash ./02.sh
		或者
		sh  ./02.sh
e.脚本的应用场景
	把重复的工作通过命令写成脚本，以后只通过脚本就可以完成工作
f.如何学习脚本
	1.尽可能多记命令
	2.掌握脚本标准格式
		执行魔法字节和使用各种执行方式运行脚本
	3.掌握脚本的基本语法
		变量定义
		条件判断
		分支语句
		函数
		数组
		传参
		正则表达式
		sed、awk
g.变量的定义
	默认情况下shell里面变量不区分类型，可以给变量赋值任何类型数据
		a=123
		a='hey'
	定义变量时候左边右边不能有空格
		a =123
		a= 123
		a = 123
h.变量的分类
	环境变量
	用来映像程序执行过程或者执行结果，一般环境变量习惯用大写来定义
	查看当前终端(shell)那些已经定义了环境变量
	定义环境变量
		临时代表某个环境变量的执行
	系统变量
	shell本身已经固定好了名字和作用
	$1,$2....$@,$?,!$
	$1 文件后跟的第一个参数
	$2 .....      二......
	$#  参数的个数
	$*  所有的参数
	$?  判断上一条语句是否正常运行，如果为0正常运行
	!$  上一次操作的最后一个参数
i.变量的赋值
	a=123
	a='help me'
	使用变量保存执行的结果使用``
	kernel=`uame -a`
	反引号可以把引号中的命令先执行，取出结果，再把结果赋值给变量
	kernel2=$(uname -a)
	双引号是弱引号，括号内变量可以正常用户
	单引号是强引号，括号内所有内容都当成普通字符串处理
j.简单的四则运算
	默认情况下，shell只支持简单的整数运算
	+ - * / %(取模，余数)
	a=1
	let "a+=1"  a=a+1
	等同于`expr $a + 1 `
	推荐使用
	b=$( ( a+1 ) )
	计算命令 bc
		echo "scale=5;1/4" | bc
		scale 小数点后保留几位
		








