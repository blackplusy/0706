1.思维导图
	xmind
	freemind
	mindmanager
	processon
	百度脑图
2.命令总结
	hsotname
	who
	whoami
	pwd
	ls
	cd
	man
	info
	ifconfig
	setup
	ping
	service
	mkdir
	rmdir
	cp
	mv
	touch
	echo
	cat
	less
	more
	head
	tail
	vi
	tar
	gzip
	du
	useradd
	usermod
	userdel
	passwd
	chmod
	chown
	top
	ps
	kill
	netstat 
	lsof
	df
	free
	init  		系统默认运行级别
		/etc/inittab
		init 0   关机
		init 3   进入到命令模式
		init 5   进入到图形模式
		init 6   重启
	chkconfig   开机启动列表
		chkconfig --list
			查看开机启动列表
		chkconfig --level 35 httpd on
			运行级别3和运行级别5apache随开机启动而启动
	mount
	umount      取消挂载
	rpm 
	yum
	su    切换用户
		su root
			切换到root用户里(不完全切换)
		su - root
			切换到root用户里(完全切换)
	tailf
		监控文件内容
		tailf /var/log/httpd/access_log
		监控apache的日志
========================================
1.循环
	ping 服务器集群
	批量创建用户user1-user100
	计算0-100的总和，0-100的偶数的和
	seq 序列
	wc -l 统计行数
	a.for循环
	b.while循环
	c.跳出循环
		continue 跳出本次循环
		break    跳出整个循环
2.awk
	线性文本处理工具
	可以在文本数据进行字段分割和重组
	默认是以空格或者连续空格作为分割符号
	a.获取本机的IP地址
		ifconfig eth0| grep Mask|awk -F " " '{print $2}'|awk -F ":" '{print $2}'
		-F 分隔符
		print 打印
		$1    拆分后的第一列
	b.打印所有行
		awk '{print }' /etc/passwd
	c.打印第一列
		查看系统中有哪些用户
		awk -F ":" '{print $1}' /etc/passwd
	d.打印多列
		awk -F ":" '{ print $1,$3}' passwd
		awk -F ":" '{ print $1":"$3}' passwd
	e.把所有通过ssh登录失败记录的IP打印出来
		lastb -i |grep ssh|awk -F " " '{print $3}'
	f.打印每行的最后一个列
		$NF 最后一列
		awk -F ":" '{ print $NF}' passwd
		/bin/bash      用户可以登录系统进行操作
		/sbin/nologin  用户可以在系统中运行程序，不能登录
	g.打印每行的字段数(每行有多少个列)
		NF列数
		awk -F ":" '{print NF}' passwd
	h.运算符号
		+
		-
		*
		/
		%
		^
		++   +1
		--   -1
		echo |awk '{print 2^3}'
	i.awk的关系操作符
		==
		!=
		>=
		<=
		>
		<
	j.逻辑操作符
		&&   逻辑与 真&&真==真
		||   逻辑或 假||假==假
		!    逻辑非
	k.打印行号
		NR代表行号
		awk -F ":" '{ print NR,$1}' passwd
		awk -F ":" 'NR==8{ print $1}' passwd
		虽然打印的是第八行，但是前7行awk一样读取，只是没有打印
	l.打印字段数量小于6的行
		必须指定分割符号，列数才有意义,列数(NF)
		awk -F ":" 'NF<6{ print}' passwd
	m.打印uid在10-50之间的用户名
		awk -F ":" '$3>=10&&$3<=50{ print }' passwd
	n.隔行删除(隔行打印)
		 awk 'NR%2==0{ print }' passwd

3.awk文件操作
	awk -F ":" 'BEGIN{处理文件前的代码块}{处理文件过程中代码块}END{处理文件后的代码块}' 文件
	a.输出顶部增加come on，输出最后增加get out
		awk -F ":" 'BEGING{ print come on}{ print }END{print get out}' passwd
	b.打印最后一行的最后一列
		awk -F ":" 'END{ print $NF}' passwd
	c.打印文件总字段数
		awk -F ":" 'BEGIN{ count=0 }{count+=NF}END{print count}' passwd
	d.打印字段数大于4的总行数
		awk -F ":" 'BEGIN{ count=0}NF>4{ count++ }END{print count}' passwd
	e.awk代码写入到独立的文件中
		cat 01.awk
			BEGIN {
			        FS=":"
			        count=0
			}
			{
			        if ( NF>4 )
			        {
			                count++
			        }
			}
			END{
			        print count
			}
		运行：awk -f 01.awk passwd
	f.awk循环
		for (i=0;i<10;i++)
		{
			printf("%d",i)
		}
		02.awk
		{
		for(i=0;i<5;i++)
		{
		        printf("%d",i)
		}
		}
		END{
		        printf("over")
		}
		运行：echo |awk -f 02.awk
	g.倒序排列所有字段
		test.txt
		1:2:3:4
		a:b:c:d:e:f
		处理后
		4:3:2:1
		f:e:d:c:b:a
		03.awk
		BEGIN{
        	FS=":"
		}
		{
		        for(i=NF;i>0;i--)
		        {
		                if (i>1)
		                {
		                        printf("%s:",$i)
		                }
		                else
		                {
		                        printf("%s\n",$i)
		                }
		        }
		}

		运行 awk -f 03.awk test.txt












